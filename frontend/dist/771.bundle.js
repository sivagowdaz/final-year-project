"use strict";(self.webpackChunkfrontend=self.webpackChunkfrontend||[]).push([[771],{31771:function(t,e,a){a.r(e),a.d(e,{Pack:function(){return T}});var r=a(84277),n=a(40262),s=JSON.parse('[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}]'),o=a(27761),i=a(2593),c=a(77616),d=a(9279),p=a(1604);a(13550),a(25025),a(70332),a(8455),a(26219),a(68834),a(65660),a(61303),a(71497),a(49242),a(94317),a(13670),a(79120),a(97604),a(8187),a(19362),a(59190),a(54730),a(36250),a(85725),a(38730),a(48507),a(38398),a(2090),a(86841),a(49561),a(80580),a(40246),a(54253),a(91559),a(40553),a(26),a(69392),a(29526),a(24601),a(46878),a(77033),a(87033),a(5158),a(20583),a(92355),a(84194),a(51121),a(58613),a(32484),a(78435),a(54098),a(54146),a(62555),a(40721),a(77437),a(59189),a(82037),a(2162),a(64063),a(34161),a(50266),a(98839),a(65815),a(52378),a(55173),a(51375),a(43320),a(77191);const u=p.z.object({contractAddress:n.af}),l=u.extend({quantity:r.A}),h=u.extend({tokenId:n.ad}),y=u.extend({tokenId:n.ad,quantity:n.ad}),w=l.omit({quantity:!0}).extend({quantityPerReward:r.A}),g=h,m=y.omit({quantity:!0}).extend({quantityPerReward:n.ad}),f=w.extend({totalRewards:n.ad.default("1")}),k=g,v=m.extend({totalRewards:n.ad.default("1")});p.z.object({erc20Rewards:p.z.array(w).default([]),erc721Rewards:p.z.array(g).default([]),erc1155Rewards:p.z.array(m).default([])});const R=p.z.object({erc20Rewards:p.z.array(f).default([]),erc721Rewards:p.z.array(k).default([]),erc1155Rewards:p.z.array(v).default([])}),A=R.extend({packMetadata:r.N,rewardsPerPack:n.ad.default("1"),openStartTime:n.ag.default(new Date)});class b{constructor(t,e,a,s,i){let c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:new n.cM(t,e,o,s);(0,r._)(this,"featureName",n.d5.name),(0,r._)(this,"contractWrapper",void 0),(0,r._)(this,"storage",void 0),(0,r._)(this,"chainId",void 0),(0,r._)(this,"events",void 0),this.contractWrapper=c,this.storage=a,this.chainId=i,this.events=new n.aX(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async open(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;const a=await this.contractWrapper.sendTransaction("openPack",[t,e],{gasLimit:5e5});let r=i.O$.from(0);try{r=this.contractWrapper.parseLogs("PackOpenRequested",a?.logs)[0].args.requestId}catch(t){}return{receipt:a,id:r}}async claimRewards(){const t=await this.contractWrapper.sendTransaction("claimRewards",[],{gasLimit:5e5}),e=this.contractWrapper.parseLogs("PackOpened",t?.logs);if(0===e.length)throw new Error("PackOpened event not found");const a=e[0].args.rewardUnitsDistributed;return this.parseRewards(a)}async parseRewards(t){const e=[],a=[],r=[];for(const s of t)switch(s.tokenType){case 0:{const t=await(0,n.b9)(this.contractWrapper.getProvider(),s.assetContract);e.push({contractAddress:s.assetContract,quantityPerReward:c.formatUnits(s.totalAmount,t.decimals).toString()});break}case 1:a.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString()});break;case 2:r.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString(),quantityPerReward:s.totalAmount.toString()})}return{erc20Rewards:e,erc721Rewards:a,erc1155Rewards:r}}async addPackOpenEventListener(t){return this.events.addEventListener("PackOpened",(async e=>{t(e.data.packId.toString(),e.data.opener,await this.parseRewards(e.data.rewardUnitsDistributed))}))}async canClaimRewards(t){const e=t||await this.contractWrapper.getSignerAddress();return await this.contractWrapper.readContract.canClaimRewards(e)}async openAndClaim(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;const r=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[t,e,a],{gasLimit:i.O$.from(5e5)});let n=i.O$.from(0);try{n=this.contractWrapper.parseLogs("PackOpenRequested",r?.logs)[0].args.requestId}catch(t){}return{receipt:r,id:n}}async getLinkBalance(){return this.getLinkContract().balanceOf(this.contractWrapper.readContract.address)}async transferLink(t){await this.getLinkContract().transfer(this.contractWrapper.readContract.address,t)}getLinkContract(){const t=n.ch[this.chainId];if(!t)throw new Error(`No LINK token address found for chainId ${this.chainId}`);const e=new n.cM(this.contractWrapper.getSignerOrProvider(),t,s,this.contractWrapper.options);return new n.au(e,this.storage,this.chainId)}}class T extends n.aS{get vrf(){return(0,n.bZ)(this._vrf,n.d5)}constructor(t,e,a){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0;super(arguments.length>6&&void 0!==arguments[6]?arguments[6]:new n.cM(t,e,o,s.gasless&&"openzeppelin"in s.gasless?{...s,gasless:{openzeppelin:{...s.gasless.openzeppelin,useEOAForwarder:!0}}}:s),a,i),(0,r._)(this,"abi",void 0),(0,r._)(this,"metadata",void 0),(0,r._)(this,"roles",void 0),(0,r._)(this,"encoder",void 0),(0,r._)(this,"events",void 0),(0,r._)(this,"estimator",void 0),(0,r._)(this,"royalties",void 0),(0,r._)(this,"interceptor",void 0),(0,r._)(this,"erc1155",void 0),(0,r._)(this,"owner",void 0),(0,r._)(this,"_vrf",void 0),this.abi=o,this.erc1155=new n.aL(this.contractWrapper,this.storage,i),this.metadata=new n.am(this.contractWrapper,n.d6,this.storage),this.roles=new n.an(this.contractWrapper,T.contractRoles),this.royalties=new n.ao(this.contractWrapper,this.metadata),this.encoder=new n.al(this.contractWrapper),this.estimator=new n.aW(this.contractWrapper),this.events=new n.aX(this.contractWrapper),this.interceptor=new n.aY(this.contractWrapper),this.owner=new n.a$(this.contractWrapper),this._vrf=this.detectVrf()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.readContract.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole((0,n.bC)("transfer"),d.d)}async getPackContents(t){const{contents:e,perUnitAmounts:a}=await this.contractWrapper.readContract.getPackContents(t),r=[],s=[],o=[];for(let t=0;t<e.length;t++){const d=e[t],p=a[t];switch(d.tokenType){case 0:{const t=await(0,n.b9)(this.contractWrapper.getProvider(),d.assetContract),e=c.formatUnits(d.totalAmount,t.decimals);r.push({contractAddress:d.assetContract,quantityPerReward:p.toString(),totalRewards:i.O$.from(e).div(p).toString()});break}case 1:s.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString()});break;case 2:o.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString(),quantityPerReward:p.toString(),totalRewards:i.O$.from(d.totalAmount).div(p).toString()})}}return{erc20Rewards:r,erc721Rewards:s,erc1155Rewards:o}}async create(t){const e=await this.contractWrapper.getSignerAddress();return this.createTo(e,t)}async addPackContents(t,e){const a=await this.contractWrapper.getSignerAddress(),r=R.parse(e),{contents:n,numOfRewardUnits:s}=await this.toPackContentArgs(r),o=await this.contractWrapper.sendTransaction("addPackContents",[t,n,s,a]),i=this.contractWrapper.parseLogs("PackUpdated",o?.logs);if(0===i.length)throw new Error("PackUpdated event not found");const c=i[0].args.packId;return{id:c,receipt:o,data:()=>this.erc1155.get(c)}}async createTo(t,e){const a=await(0,n.d0)(e.packMetadata,this.storage),r=A.parse(e),{erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i}=r,c={erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i},{contents:d,numOfRewardUnits:p}=await this.toPackContentArgs(c),u=await this.contractWrapper.sendTransaction("createPack",[d,p,a,r.openStartTime,r.rewardsPerPack,t]),l=this.contractWrapper.parseLogs("PackCreated",u?.logs);if(0===l.length)throw new Error("PackCreated event not found");const h=l[0].args.packId;return{id:h,receipt:u,data:()=>this.erc1155.get(h)}}async open(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1;if(this._vrf)throw new Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");const a=await this.contractWrapper.sendTransaction("openPack",[t,e],{gasLimit:5e5}),r=this.contractWrapper.parseLogs("PackOpened",a?.logs);if(0===r.length)throw new Error("PackOpened event not found");const s=r[0].args.rewardUnitsDistributed,o=[],i=[],d=[];for(const t of s)switch(t.tokenType){case 0:{const e=await(0,n.b9)(this.contractWrapper.getProvider(),t.assetContract);o.push({contractAddress:t.assetContract,quantityPerReward:c.formatUnits(t.totalAmount,e.decimals).toString()});break}case 1:i.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString()});break;case 2:d.push({contractAddress:t.assetContract,tokenId:t.tokenId.toString(),quantityPerReward:t.totalAmount.toString()})}return{erc20Rewards:o,erc721Rewards:i,erc1155Rewards:d}}async toPackContentArgs(t){const e=[],a=[],{erc20Rewards:r,erc721Rewards:s,erc1155Rewards:o}=t,c=this.contractWrapper.getProvider(),d=await this.contractWrapper.getSignerAddress();for(const t of r){const r=(await(0,n.ba)(c,t.quantityPerReward,t.contractAddress)).mul(t.totalRewards);if(!await(0,n.d1)(this.contractWrapper,t.contractAddress,r))throw new Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.\n\nYou can set allowance to the multiwrap contract to transfer these tokens by running:\n\nawait sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${r});\n\n`);a.push(t.totalRewards),e.push({assetContract:t.contractAddress,tokenType:0,totalAmount:r,tokenId:0})}for(const t of s){if(!await(0,n.cY)(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,d))throw new Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});\n\n`);a.push("1"),e.push({assetContract:t.contractAddress,tokenType:1,totalAmount:1,tokenId:t.tokenId})}for(const t of o){if(!await(0,n.cY)(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,d))throw new Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.\n\nYou can give approval the multiwrap contract to transfer this token by running:\n\nawait sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);\n\n`);a.push(t.totalRewards),e.push({assetContract:t.contractAddress,tokenType:2,totalAmount:i.O$.from(t.quantityPerReward).mul(i.O$.from(t.totalRewards)),tokenId:t.tokenId})}return{contents:e,numOfRewardUnits:a}}async call(t){for(var e=arguments.length,a=new Array(e>1?e-1:0),r=1;r<e;r++)a[r-1]=arguments[r];return this.contractWrapper.call(t,...a)}detectVrf(){if((0,n.b_)(this.contractWrapper,"PackVRF"))return new b(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.readContract.address,this.storage,this.contractWrapper.options,this.chainId)}}(0,r._)(T,"contractRoles",["admin","minter","asset","transfer"])}}]);